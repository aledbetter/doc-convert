
https://www.tutorialspoint.com/apache_poi_word/apache_poi_word_text_extraction.htm


<!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>3.17</version>
</dependency>


import java.io.FileInputStream;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

public class WordExtractor {

   public static void main(String[] args)throws Exception {

      XWPFDocument docx = new XWPFDocument(new FileInputStream("create_paragraph.docx"));
      
      //using XWPFWordExtractor Class
      XWPFWordExtractor we = new XWPFWordExtractor(docx);
      System.out.println(we.getText());
   }
}

MARKUP input text

 Allows visual elements to be used by sedro to better understand the content, just as human readers do
 
	 <u>underline</u> 
	 <b>bold</b> 
	 <i>italic</i> 
	 <f10>font size</f10>     		
	 
	 <h1>header</h1>            			number for depth
	 <li1>list item</li1>      				number for depth optional -> used for outlines
	 
	 <ml1>margin left </ml1>             	distance from left,  left justified content
	 <mr1>margin right</mr1>             	distance from right, right justified content
	 
	 -- Document / content sectioning
	 <s>sentence or line</s>              	mark sentences
	 <p>paragraph</p>                     	mark paragraphs
	 <c>chapter</c>                       	mark chapters
	 	
	 <it-title>Document title<it-title>
	 <it-author>Document Author(s)</it-author>
	 <it-pub-time>Document Author(s)</it-pub-time>
	 <it-lang>en<it-lang>
	 
	 <hdr>header</hdr>
	 <ftr>footer</ftr>
	 <ovr>overlay</ovr>      				overlayed content or out of context interjection (controls, add, etc)
     <dp-xxx>document partition</dp-xxx>    where xxx is partition name (header, footer, body, preface, toc, etc)

    
  
  Process of ingress and etc
  1) GENERAL USE: input with the tags
	  0) TAGS in to tags mapped
	  1) process as normal until maptoken section
	  2) Parse all Tags => add features for each => remove from the tokens and cleanup
	     - use sentences features to correct sentences when needed
	     - use paragraph and chapters to mark token sections in the other tokens => add chapters and paragraphs
	     - use document partitions to mark doc part for all tokens, list doc parts
	  3) alter DocParts to use the title/section/etc tags (when present) for the work 
	     - use paragraphs AND chapters to limit references / entity mappings
	  
	  4) extract: 
	    - use headers to get section titles => not inline content
	    - use ovr to map content that is not close to content it is with in the text (same as another paragraph)
	    - what with font size?
	    - what with i/u/b
	    - generate lists with list items
	       - build tree's if there are indents and multiple levels 
	    
	 
   2) TEMPLATE DRIVEN: template AND tagged content as input
    - MicroService: doc/pdf/html/text extract tagged text
    - define template format => live in Lexicon/ontologies
       - sections in document
       - extract/classify guidence
       - extended extraxt/classify/etc rules => linked to any named element in the template
       - GUI: Template view/browse
       
    - Template Guided Resolve
       Mostly Normal
       - First standard for document with correct based on tags, etc, just as GENERAL USE
       - run extracts on document
       - use template guidence to decide if single readlist OR per named section
       - process readlist, use template info for section to determine the set of rules to use for any process.
       
       Template Driven
       - new document tied to template
       - use document as base data follow the directions of the template to extract information needed for each section
       - output based on template
         - in order generate template info stub
         - result will be in named segments containing tokens/Items
           - meta section will have specific items will be labled if defined in template
             - start / end dates, title, company, location, name, etc
           - named sections may be in: (at any level)
             - singleton (personal information)
             - list (work history)
             - heiarchy (skill sets)
        
       
    - output via template
    - BUILD: title, company and technical ontologies
 
 
 LEARNING:
     - mapping primaries and logical associated data
    - adding relationships
    - build ontologies
    
    

    
    
    
    
    
 